	AREA text, CODE, READONLY
	EXPORT asm_math

; function asm_math
; inputs:
; -------
; R0: input


asm_math
	MOV R3, #0x40000000 
	SUB R3, R3, R3 ;SETTING INDEX TO 0
	VMOV.F32 S0, #0x40000000 ;INITIALIZING MINIMUM VALUE (TO FIX)
	VMOV.F32 S1, #0x3f800000 ;INITIALIZING MAXIMUM VALUE (TO FIX)
	VMOV.F32 S4, R2 ;SETTING S4 TO LENGTH - SHOULD BE ABLE TO DELETE
	MOV R3, R3 ;SETTING R3 TO INDEX

line12
  ;checks iterator and you have a branch here
	CMP R3, R2 ;COMPARE INDEX WITH LENGTH - TERMINATION CONDITION
	BGE rms ;COMPUTING RMS VALUE
	VLDM R0, {S2} ;LOADING INPUT INTO CURRENT VAL
	VCMP.F32 S2, S0 ;COMPARING CURRENT VAL WITH MINIMUM VALUE
	BLE minimum
	;BLE S2, S0, minimum
	VCMP.F32 S2, S1 ;COMPARING CURRENT VAL WITH MAX VAL
	BGE maximum
	;BGE S2, S1, maximum
	BL rip
	;jmp rip
	
minimum
	VMOV.F32 S0, S2 ;REPLACING THE MIN VAL WITH THE CURRENT VAL
	ADD R4, R1, #0x80000000 ;CHECK LATER ITERATE BY 8
	ADD R0, R0, #0x40000000 ;CHECK VALUE LATER ITERATE ADDRESS OF INPUT - ITERATE BY 4 
	VMOV.F32 S5, R3
	VSTR.F32 S5, [R4] ;STORE INDEX IN OUTPUT VALUE
	VMLA.F32 S3,S2,S2 ;SQUARE VALUE AND ADD IT TO S3 (RMS VALUE)
	ADD R3,R3,#1 ;ITERATE INDEX
	BL line12
	
maximum
	VMOV.F32 S1, S2 ;REPLACING THE MAX VALUE WITH THE CURRENT VAL
	ADD R4, R1, #12 ;PLACING OUTPUT IN 
	VMOV.F32 S5, R3
	VSTR.F32 S5, [R4]; STORE INDEX IN OUTPUT INDEX VALUE 
	ADD R0, R0, #4 ;ITERATE ADDRESS OF INPUT
	VMLA.F32 S3,S2,S2 ;SQUARE THE VALUE AND ADD IT TO RMS VALUE
	ADD R3,R3,#1 ;ITERATE INDEX
	BL line12
	
rip
	VMLA.F32 S3,S2,S2 ;SQUARE THE VALUE AND ADD IT TO RMS VALUE
	ADD R0, R0, #4 ;ITERATE INPUT ADDRESS
	ADD R3,R3,#1 ;ITERATE INDEX
	BL line12
	
rms
	VDIV.F32 S3, S3, S4 ;DIVIDE RMS VALUE BY LENGTH
	VSQRT.F32 S3, S3 ;SQUAREROOT WHAT REMAINS
	ADD R4, R1, #16 ;MOVE POINTER TO RMS OUTPUT REGISTER
	VSTR.F32 S3, [R4] ;STORE RMS VALUE IN APPROPRIATE REGISTER IN OUTPUT 
	ADD R4, R1, #0 ;REGISTER OUTPUT OF MINVAL
	VSTR.F32 S0, [R4]; STORING MINIMUM VALUE 
	ADD R4, R1, #4 ;REGISTER OUTPUT OF MAXVAL
	VSTR.F32 S1, [R4] ;STORING MAXVAL

END
